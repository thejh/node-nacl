
var test = require("tap").test;
var crypto = require("crypto");

var n = require("../index").nacl;
    
var rs = Buffer("eea6a7251c1e72916d11c2cb214d3c25"+
                "2539121d8e234e652d651fa4c8cff880", "hex");
var c = Buffer("8e993b9f48681273c29650ba32fc76ce"+
               "48332ea7164d96a4476fb8c531a1186a"+
               "c0dfc17c98dce87b4da7f011ec48c972"+
               "71d2c20f9b928fe2270d6fb863d51738"+
               "b48eeee314a7cc8ab932164548e526ae"+
               "90224368517acfeabd6bb3732bc0e9da"+
               "99832b61ca01b6de56244a9e88d5f9b3"+
               "7973f622a43d14a6599b1f654cb45a74"+
               "e355a5", "hex"); // 131 bytes long

test("onetimeauth", function(t) {
    t.equivalent(n.onetimeauth(c, rs),
                 Buffer("f3ffc7703f9400e52a7dfb4b3d3305d9", "hex"));
    t.end();
});

test("onetimeauth-nacl", function(t) {
    var ota1_rs = Buffer([0xee,0xa6,0xa7,0x25,0x1c,0x1e,0x72,0x91
                          ,0x6d,0x11,0xc2,0xcb,0x21,0x4d,0x3c,0x25
                          ,0x25,0x39,0x12,0x1d,0x8e,0x23,0x4e,0x65
                          ,0x2d,0x65,0x1f,0xa4,0xc8,0xcf,0xf8,0x80]);
    var ota1_c = Buffer([0x8e,0x99,0x3b,0x9f,0x48,0x68,0x12,0x73
                         ,0xc2,0x96,0x50,0xba,0x32,0xfc,0x76,0xce
                         ,0x48,0x33,0x2e,0xa7,0x16,0x4d,0x96,0xa4
                         ,0x47,0x6f,0xb8,0xc5,0x31,0xa1,0x18,0x6a
                         ,0xc0,0xdf,0xc1,0x7c,0x98,0xdc,0xe8,0x7b
                         ,0x4d,0xa7,0xf0,0x11,0xec,0x48,0xc9,0x72
                         ,0x71,0xd2,0xc2,0x0f,0x9b,0x92,0x8f,0xe2
                         ,0x27,0x0d,0x6f,0xb8,0x63,0xd5,0x17,0x38
                         ,0xb4,0x8e,0xee,0xe3,0x14,0xa7,0xcc,0x8a
                         ,0xb9,0x32,0x16,0x45,0x48,0xe5,0x26,0xae
                         ,0x90,0x22,0x43,0x68,0x51,0x7a,0xcf,0xea
                         ,0xbd,0x6b,0xb3,0x73,0x2b,0xc0,0xe9,0xda
                         ,0x99,0x83,0x2b,0x61,0xca,0x01,0xb6,0xde
                         ,0x56,0x24,0x4a,0x9e,0x88,0xd5,0xf9,0xb3
                         ,0x79,0x73,0xf6,0x22,0xa4,0x3d,0x14,0xa6
                         ,0x59,0x9b,0x1f,0x65,0x4c,0xb4,0x5a,0x74
                         ,0xe3,0x55,0xa5]);
    var ota1_a = n.onetimeauth(ota1_c, ota1_rs);
    t.equivalent(ota1_a, Buffer([0xf3,0xff,0xc7,0x70,0x3f,0x94,0x00,0xe5
                                 ,0x2a,0x7d,0xfb,0x4b,0x3d,0x33,0x05,0xd9]));

    var ota2_rs = Buffer([0xee,0xa6,0xa7,0x25,0x1c,0x1e,0x72,0x91
                          ,0x6d,0x11,0xc2,0xcb,0x21,0x4d,0x3c,0x25
                          ,0x25,0x39,0x12,0x1d,0x8e,0x23,0x4e,0x65
                          ,0x2d,0x65,0x1f,0xa4,0xc8,0xcf,0xf8,0x80]);
    var ota2_c = Buffer([0x8e,0x99,0x3b,0x9f,0x48,0x68,0x12,0x73
                         ,0xc2,0x96,0x50,0xba,0x32,0xfc,0x76,0xce
                         ,0x48,0x33,0x2e,0xa7,0x16,0x4d,0x96,0xa4
                         ,0x47,0x6f,0xb8,0xc5,0x31,0xa1,0x18,0x6a
                         ,0xc0,0xdf,0xc1,0x7c,0x98,0xdc,0xe8,0x7b
                         ,0x4d,0xa7,0xf0,0x11,0xec,0x48,0xc9,0x72
                         ,0x71,0xd2,0xc2,0x0f,0x9b,0x92,0x8f,0xe2
                         ,0x27,0x0d,0x6f,0xb8,0x63,0xd5,0x17,0x38
                         ,0xb4,0x8e,0xee,0xe3,0x14,0xa7,0xcc,0x8a
                         ,0xb9,0x32,0x16,0x45,0x48,0xe5,0x26,0xae
                         ,0x90,0x22,0x43,0x68,0x51,0x7a,0xcf,0xea
                         ,0xbd,0x6b,0xb3,0x73,0x2b,0xc0,0xe9,0xda
                         ,0x99,0x83,0x2b,0x61,0xca,0x01,0xb6,0xde
                         ,0x56,0x24,0x4a,0x9e,0x88,0xd5,0xf9,0xb3
                         ,0x79,0x73,0xf6,0x22,0xa4,0x3d,0x14,0xa6
                         ,0x59,0x9b,0x1f,0x65,0x4c,0xb4,0x5a,0x74
                         ,0xe3,0x55,0xa5]);
    var ota2_a = Buffer([0xf3,0xff,0xc7,0x70,0x3f,0x94,0x00,0xe5
                         ,0x2a,0x7d,0xfb,0x4b,0x3d,0x33,0x05,0xd9]);
    n.onetimeauth_verify(ota2_a, ota2_c, ota2_rs); // no exception
    t.ok("onetimeauth2 verify didn't raise exception");

    // nacl doesn't have onetimeauth3 or onetimeauth4
    // onetimeauth5 is C++ variant of onetimeauth[1]
    // onetimeauth6 is C++ variant of onetimeauth2

    for(var ota7_clen=0; ota7_clen < 1000; ota7_clen++) {
        var ota7_key = Buffer(crypto.randomBytes(32), "binary");
        var ota7_c = Buffer(crypto.randomBytes(ota7_clen), "binary");
        var ota7_a = n.onetimeauth(ota7_c, ota7_key);
        n.onetimeauth_verify(ota7_a, ota7_c, ota7_key); // no exception
        if (ota7_clen > 0) {
            ota7_c[Math.floor(Math.random()*ota7_clen)] += 1 + Math.floor(Math.random()*255); // always changes it
            try {
                n.onetimeauth_verify(ota7_a, ota7_c, ota7_key);
                t.fail("forgery");
            } catch (e) {
                t.equal(e.message, "invalid authenticator");
            }
            // N.B. cumulative
            ota7_a[Math.floor(Math.random()*ota7_a.length)] += 1 + Math.floor(Math.random()*255); // always changes it
            try {
                n.onetimeauth_verify(ota7_a, ota7_c, ota7_key);
                t.fail("forgery");
            } catch (e) {
                t.equal(e.message, "invalid authenticator");
            }
        }
    }

    // onetimeauth8 is a C++ variant of onetimeauth7


    t.end();
});

